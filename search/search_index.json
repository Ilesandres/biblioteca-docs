{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Biblioteca Digital - Documentaci\u00f3n Visi\u00f3n General Bienvenido a la documentaci\u00f3n oficial del proyecto Biblioteca Digital, una soluci\u00f3n moderna y completa para la gesti\u00f3n de recursos bibliotecarios. \u00bfQu\u00e9 es Biblioteca Digital? Biblioteca Digital es un sistema integral dise\u00f1ado para modernizar la gesti\u00f3n de bibliotecas, combinando tecnolog\u00edas modernas con pr\u00e1cticas bibliotecarias eficientes. Nuestro sistema ofrece una plataforma digital completa que facilita tanto la administraci\u00f3n de recursos como la experiencia del usuario. Caracter\u00edsticas Destacadas Para Usuarios B\u00fasqueda avanzada de recursos Gesti\u00f3n de pr\u00e9stamos personal Perfil personalizable Interfaz intuitiva y responsiva Para Administradores Panel de control completo Gesti\u00f3n de usuarios y roles Control de inventario Generaci\u00f3n de reportes Arquitectura del Sistema Nuestro sistema est\u00e1 construido utilizando tecnolog\u00edas modernas y robustas: Frontend React.js para una interfaz de usuario moderna Dise\u00f1o responsivo para acceso multiplataforma Sistema de autenticaci\u00f3n seguro Backend Node.js como servidor principal MySQL para gesti\u00f3n de datos Docker para contenedorizaci\u00f3n Navegaci\u00f3n de la Documentaci\u00f3n Gu\u00eda de Instalaci\u00f3n - Configuraci\u00f3n del sistema Manual de Usuario - Instrucciones detalladas de uso Estado Actual El proyecto se encuentra en desarrollo activo, con implementaciones exitosas de: - Sistema de autenticaci\u00f3n seguro - Gesti\u00f3n b\u00e1sica de usuarios - Interfaz de usuario moderna - Funcionalidades core de biblioteca Pr\u00f3ximos Pasos Optimizaci\u00f3n de rendimiento Mejoras en la experiencia de usuario Implementaci\u00f3n de caracter\u00edsticas avanzadas Expansi\u00f3n de capacidades de reportes","title":"Inicio"},{"location":"#biblioteca-digital-documentacion","text":"","title":"Biblioteca Digital - Documentaci\u00f3n"},{"location":"#vision-general","text":"Bienvenido a la documentaci\u00f3n oficial del proyecto Biblioteca Digital, una soluci\u00f3n moderna y completa para la gesti\u00f3n de recursos bibliotecarios.","title":"Visi\u00f3n General"},{"location":"#que-es-biblioteca-digital","text":"Biblioteca Digital es un sistema integral dise\u00f1ado para modernizar la gesti\u00f3n de bibliotecas, combinando tecnolog\u00edas modernas con pr\u00e1cticas bibliotecarias eficientes. Nuestro sistema ofrece una plataforma digital completa que facilita tanto la administraci\u00f3n de recursos como la experiencia del usuario.","title":"\u00bfQu\u00e9 es Biblioteca Digital?"},{"location":"#caracteristicas-destacadas","text":"","title":"Caracter\u00edsticas Destacadas"},{"location":"#para-usuarios","text":"B\u00fasqueda avanzada de recursos Gesti\u00f3n de pr\u00e9stamos personal Perfil personalizable Interfaz intuitiva y responsiva","title":"Para Usuarios"},{"location":"#para-administradores","text":"Panel de control completo Gesti\u00f3n de usuarios y roles Control de inventario Generaci\u00f3n de reportes","title":"Para Administradores"},{"location":"#arquitectura-del-sistema","text":"Nuestro sistema est\u00e1 construido utilizando tecnolog\u00edas modernas y robustas:","title":"Arquitectura del Sistema"},{"location":"#frontend","text":"React.js para una interfaz de usuario moderna Dise\u00f1o responsivo para acceso multiplataforma Sistema de autenticaci\u00f3n seguro","title":"Frontend"},{"location":"#backend","text":"Node.js como servidor principal MySQL para gesti\u00f3n de datos Docker para contenedorizaci\u00f3n","title":"Backend"},{"location":"#navegacion-de-la-documentacion","text":"Gu\u00eda de Instalaci\u00f3n - Configuraci\u00f3n del sistema Manual de Usuario - Instrucciones detalladas de uso","title":"Navegaci\u00f3n de la Documentaci\u00f3n"},{"location":"#estado-actual","text":"El proyecto se encuentra en desarrollo activo, con implementaciones exitosas de: - Sistema de autenticaci\u00f3n seguro - Gesti\u00f3n b\u00e1sica de usuarios - Interfaz de usuario moderna - Funcionalidades core de biblioteca","title":"Estado Actual"},{"location":"#proximos-pasos","text":"Optimizaci\u00f3n de rendimiento Mejoras en la experiencia de usuario Implementaci\u00f3n de caracter\u00edsticas avanzadas Expansi\u00f3n de capacidades de reportes","title":"Pr\u00f3ximos Pasos"},{"location":"instalacion/","text":"Gu\u00eda de Instalaci\u00f3n Requisitos Previos Antes de comenzar la instalaci\u00f3n, aseg\u00farese de tener instalado: Node.js (v14 o superior) Docker y Docker Compose Git MySQL (si no usa Docker) Pasos de Instalaci\u00f3n 1. Clonar el Repositorio git clone [URL_DEL_REPOSITORIO] cd biblioteca-digital 2. Configuraci\u00f3n del Frontend # Navegar al directorio del frontend cd frontend # Instalar dependencias npm install # Crear archivo de variables de entorno cp .env.example .env Edite el archivo .env con sus configuraciones locales. 3. Configuraci\u00f3n del Backend # Navegar al directorio del backend cd ../backend # Instalar dependencias npm install # Crear archivo de variables de entorno cp .env.example .env Edite el archivo .env con sus configuraciones de base de datos y otras variables de entorno. 4. Configuraci\u00f3n de la Base de Datos Usando Docker (Recomendado) # Iniciar servicios con Docker Compose docker-compose up -d Configuraci\u00f3n Manual Si no usa Docker, configure su base de datos MySQL local seg\u00fan las especificaciones en .env . 5. Iniciar el Proyecto Desarrollo # Iniciar backend cd backend npm run dev # En otra terminal, iniciar frontend cd frontend npm run dev Producci\u00f3n # Construir frontend cd frontend npm run build # Iniciar backend en modo producci\u00f3n cd ../backend npm start Verificaci\u00f3n de la Instalaci\u00f3n Frontend: Acceda a http://localhost:5173 Backend: Verifique http://localhost:3000/api/health Base de datos: Verifique la conexi\u00f3n a trav\u00e9s del backend Configuraci\u00f3n SSL para Desarrollo Local Generar Certificados mkcert localhost Mueva los certificados generados a la carpeta correspondiente y actualice la configuraci\u00f3n en el archivo .env . Soluci\u00f3n de Problemas Comunes Error de Conexi\u00f3n a la Base de Datos Verifique las credenciales en .env Confirme que el servicio MySQL est\u00e9 activo Revise la conectividad al puerto de la base de datos Errores de Dependencias Limpie la cach\u00e9 de npm: npm cache clean --force Elimine node_modules y reinstale: rm -rf node_modules && npm install Problemas con Docker Verifique que Docker est\u00e9 corriendo Revise los logs: docker-compose logs Reconstruya los contenedores: docker-compose up --build Siguientes Pasos Una vez completada la instalaci\u00f3n, consulte el Manual de Usuario para comenzar a utilizar el sistema.","title":"Instalaci\u00f3n"},{"location":"instalacion/#guia-de-instalacion","text":"","title":"Gu\u00eda de Instalaci\u00f3n"},{"location":"instalacion/#requisitos-previos","text":"Antes de comenzar la instalaci\u00f3n, aseg\u00farese de tener instalado: Node.js (v14 o superior) Docker y Docker Compose Git MySQL (si no usa Docker)","title":"Requisitos Previos"},{"location":"instalacion/#pasos-de-instalacion","text":"","title":"Pasos de Instalaci\u00f3n"},{"location":"instalacion/#1-clonar-el-repositorio","text":"git clone [URL_DEL_REPOSITORIO] cd biblioteca-digital","title":"1. Clonar el Repositorio"},{"location":"instalacion/#2-configuracion-del-frontend","text":"# Navegar al directorio del frontend cd frontend # Instalar dependencias npm install # Crear archivo de variables de entorno cp .env.example .env Edite el archivo .env con sus configuraciones locales.","title":"2. Configuraci\u00f3n del Frontend"},{"location":"instalacion/#3-configuracion-del-backend","text":"# Navegar al directorio del backend cd ../backend # Instalar dependencias npm install # Crear archivo de variables de entorno cp .env.example .env Edite el archivo .env con sus configuraciones de base de datos y otras variables de entorno.","title":"3. Configuraci\u00f3n del Backend"},{"location":"instalacion/#4-configuracion-de-la-base-de-datos","text":"","title":"4. Configuraci\u00f3n de la Base de Datos"},{"location":"instalacion/#usando-docker-recomendado","text":"# Iniciar servicios con Docker Compose docker-compose up -d","title":"Usando Docker (Recomendado)"},{"location":"instalacion/#configuracion-manual","text":"Si no usa Docker, configure su base de datos MySQL local seg\u00fan las especificaciones en .env .","title":"Configuraci\u00f3n Manual"},{"location":"instalacion/#5-iniciar-el-proyecto","text":"","title":"5. Iniciar el Proyecto"},{"location":"instalacion/#desarrollo","text":"# Iniciar backend cd backend npm run dev # En otra terminal, iniciar frontend cd frontend npm run dev","title":"Desarrollo"},{"location":"instalacion/#produccion","text":"# Construir frontend cd frontend npm run build # Iniciar backend en modo producci\u00f3n cd ../backend npm start","title":"Producci\u00f3n"},{"location":"instalacion/#verificacion-de-la-instalacion","text":"Frontend: Acceda a http://localhost:5173 Backend: Verifique http://localhost:3000/api/health Base de datos: Verifique la conexi\u00f3n a trav\u00e9s del backend","title":"Verificaci\u00f3n de la Instalaci\u00f3n"},{"location":"instalacion/#configuracion-ssl-para-desarrollo-local","text":"","title":"Configuraci\u00f3n SSL para Desarrollo Local"},{"location":"instalacion/#generar-certificados","text":"mkcert localhost Mueva los certificados generados a la carpeta correspondiente y actualice la configuraci\u00f3n en el archivo .env .","title":"Generar Certificados"},{"location":"instalacion/#solucion-de-problemas-comunes","text":"","title":"Soluci\u00f3n de Problemas Comunes"},{"location":"instalacion/#error-de-conexion-a-la-base-de-datos","text":"Verifique las credenciales en .env Confirme que el servicio MySQL est\u00e9 activo Revise la conectividad al puerto de la base de datos","title":"Error de Conexi\u00f3n a la Base de Datos"},{"location":"instalacion/#errores-de-dependencias","text":"Limpie la cach\u00e9 de npm: npm cache clean --force Elimine node_modules y reinstale: rm -rf node_modules && npm install","title":"Errores de Dependencias"},{"location":"instalacion/#problemas-con-docker","text":"Verifique que Docker est\u00e9 corriendo Revise los logs: docker-compose logs Reconstruya los contenedores: docker-compose up --build","title":"Problemas con Docker"},{"location":"instalacion/#siguientes-pasos","text":"Una vez completada la instalaci\u00f3n, consulte el Manual de Usuario para comenzar a utilizar el sistema.","title":"Siguientes Pasos"},{"location":"uso/","text":"Manual de Usuario - Biblioteca Digital Introducci\u00f3n Este manual proporciona una gu\u00eda detallada sobre c\u00f3mo utilizar el sistema de Biblioteca Digital, explicando todas las funcionalidades disponibles tanto para usuarios como para administradores. Acceso al Sistema Registro de Usuario Acceda a la p\u00e1gina principal Haga clic en \"Registrarse\" Complete el formulario con sus datos Verifique su correo electr\u00f3nico Inicio de Sesi\u00f3n Ingrese su correo electr\u00f3nico Ingrese su contrase\u00f1a Seleccione \"Mantener sesi\u00f3n iniciada\" si lo desea Funcionalidades para Usuarios B\u00fasqueda de Recursos B\u00fasqueda Simple Utilice la barra de b\u00fasqueda principal Ingrese palabras clave Filtre por categor\u00eda si lo desea B\u00fasqueda Avanzada Acceda a \"B\u00fasqueda Avanzada\" Utilice filtros espec\u00edficos: Autor T\u00edtulo A\u00f1o de publicaci\u00f3n Categor\u00eda Disponibilidad Gesti\u00f3n de Pr\u00e9stamos Solicitar un Pr\u00e9stamo Busque el recurso deseado Verifique disponibilidad Haga clic en \"Solicitar Pr\u00e9stamo\" Confirme la solicitud Renovar Pr\u00e9stamos Acceda a \"Mis Pr\u00e9stamos\" Seleccione el pr\u00e9stamo a renovar Haga clic en \"Renovar\" Historial de Pr\u00e9stamos Visualice pr\u00e9stamos actuales Consulte historial completo Verifique fechas de devoluci\u00f3n Perfil de Usuario Actualizaci\u00f3n de Datos Acceda a \"Mi Perfil\" Modifique los campos deseados Guarde los cambios Cambio de Contrase\u00f1a Vaya a \"Configuraci\u00f3n\" Seleccione \"Cambiar Contrase\u00f1a\" Siga las instrucciones Panel de Administraci\u00f3n Gesti\u00f3n de Usuarios Crear Nuevo Usuario Acceda a \"Gesti\u00f3n de Usuarios\" Haga clic en \"Nuevo Usuario\" Complete la informaci\u00f3n Asigne roles y permisos Modificar Usuarios Busque el usuario Edite la informaci\u00f3n Actualice roles/permisos Gesti\u00f3n de Recursos Agregar Nuevo Recurso Vaya a \"Gesti\u00f3n de Recursos\" Seleccione \"Nuevo Recurso\" Complete el formulario Adjunte archivos si es necesario Actualizar Recursos Localice el recurso Modifique la informaci\u00f3n Actualice el estado Reportes Generaci\u00f3n de Reportes Acceda a \"Reportes\" Seleccione el tipo de reporte Configure filtros Genere y descargue Tipos de Reportes Disponibles Pr\u00e9stamos activos Recursos m\u00e1s solicitados Usuarios activos Estad\u00edsticas generales Funcionalidades Avanzadas Notificaciones Configure preferencias Revise notificaciones pendientes Archive o elimine notificaciones Exportaci\u00f3n de Datos Seleccione datos a exportar Elija formato (CSV, PDF) Descargue el archivo Soluci\u00f3n de Problemas Comunes Problemas de Acceso Verifique sus credenciales Use \"Olvid\u00e9 mi contrase\u00f1a\" Contacte al administrador Errores en Pr\u00e9stamos Verifique l\u00edmites de pr\u00e9stamos Confirme disponibilidad Revise estado de usuario Contacto y Soporte Correo de soporte: soporte@biblioteca.com Horario de atenci\u00f3n: Lunes a Viernes, 9:00 - 18:00 Sistema de tickets: [URL del sistema]","title":"Uso"},{"location":"uso/#manual-de-usuario-biblioteca-digital","text":"","title":"Manual de Usuario - Biblioteca Digital"},{"location":"uso/#introduccion","text":"Este manual proporciona una gu\u00eda detallada sobre c\u00f3mo utilizar el sistema de Biblioteca Digital, explicando todas las funcionalidades disponibles tanto para usuarios como para administradores.","title":"Introducci\u00f3n"},{"location":"uso/#acceso-al-sistema","text":"","title":"Acceso al Sistema"},{"location":"uso/#registro-de-usuario","text":"Acceda a la p\u00e1gina principal Haga clic en \"Registrarse\" Complete el formulario con sus datos Verifique su correo electr\u00f3nico","title":"Registro de Usuario"},{"location":"uso/#inicio-de-sesion","text":"Ingrese su correo electr\u00f3nico Ingrese su contrase\u00f1a Seleccione \"Mantener sesi\u00f3n iniciada\" si lo desea","title":"Inicio de Sesi\u00f3n"},{"location":"uso/#funcionalidades-para-usuarios","text":"","title":"Funcionalidades para Usuarios"},{"location":"uso/#busqueda-de-recursos","text":"","title":"B\u00fasqueda de Recursos"},{"location":"uso/#busqueda-simple","text":"Utilice la barra de b\u00fasqueda principal Ingrese palabras clave Filtre por categor\u00eda si lo desea","title":"B\u00fasqueda Simple"},{"location":"uso/#busqueda-avanzada","text":"Acceda a \"B\u00fasqueda Avanzada\" Utilice filtros espec\u00edficos: Autor T\u00edtulo A\u00f1o de publicaci\u00f3n Categor\u00eda Disponibilidad","title":"B\u00fasqueda Avanzada"},{"location":"uso/#gestion-de-prestamos","text":"","title":"Gesti\u00f3n de Pr\u00e9stamos"},{"location":"uso/#solicitar-un-prestamo","text":"Busque el recurso deseado Verifique disponibilidad Haga clic en \"Solicitar Pr\u00e9stamo\" Confirme la solicitud","title":"Solicitar un Pr\u00e9stamo"},{"location":"uso/#renovar-prestamos","text":"Acceda a \"Mis Pr\u00e9stamos\" Seleccione el pr\u00e9stamo a renovar Haga clic en \"Renovar\"","title":"Renovar Pr\u00e9stamos"},{"location":"uso/#historial-de-prestamos","text":"Visualice pr\u00e9stamos actuales Consulte historial completo Verifique fechas de devoluci\u00f3n","title":"Historial de Pr\u00e9stamos"},{"location":"uso/#perfil-de-usuario","text":"","title":"Perfil de Usuario"},{"location":"uso/#actualizacion-de-datos","text":"Acceda a \"Mi Perfil\" Modifique los campos deseados Guarde los cambios","title":"Actualizaci\u00f3n de Datos"},{"location":"uso/#cambio-de-contrasena","text":"Vaya a \"Configuraci\u00f3n\" Seleccione \"Cambiar Contrase\u00f1a\" Siga las instrucciones","title":"Cambio de Contrase\u00f1a"},{"location":"uso/#panel-de-administracion","text":"","title":"Panel de Administraci\u00f3n"},{"location":"uso/#gestion-de-usuarios","text":"","title":"Gesti\u00f3n de Usuarios"},{"location":"uso/#crear-nuevo-usuario","text":"Acceda a \"Gesti\u00f3n de Usuarios\" Haga clic en \"Nuevo Usuario\" Complete la informaci\u00f3n Asigne roles y permisos","title":"Crear Nuevo Usuario"},{"location":"uso/#modificar-usuarios","text":"Busque el usuario Edite la informaci\u00f3n Actualice roles/permisos","title":"Modificar Usuarios"},{"location":"uso/#gestion-de-recursos","text":"","title":"Gesti\u00f3n de Recursos"},{"location":"uso/#agregar-nuevo-recurso","text":"Vaya a \"Gesti\u00f3n de Recursos\" Seleccione \"Nuevo Recurso\" Complete el formulario Adjunte archivos si es necesario","title":"Agregar Nuevo Recurso"},{"location":"uso/#actualizar-recursos","text":"Localice el recurso Modifique la informaci\u00f3n Actualice el estado","title":"Actualizar Recursos"},{"location":"uso/#reportes","text":"","title":"Reportes"},{"location":"uso/#generacion-de-reportes","text":"Acceda a \"Reportes\" Seleccione el tipo de reporte Configure filtros Genere y descargue","title":"Generaci\u00f3n de Reportes"},{"location":"uso/#tipos-de-reportes-disponibles","text":"Pr\u00e9stamos activos Recursos m\u00e1s solicitados Usuarios activos Estad\u00edsticas generales","title":"Tipos de Reportes Disponibles"},{"location":"uso/#funcionalidades-avanzadas","text":"","title":"Funcionalidades Avanzadas"},{"location":"uso/#notificaciones","text":"Configure preferencias Revise notificaciones pendientes Archive o elimine notificaciones","title":"Notificaciones"},{"location":"uso/#exportacion-de-datos","text":"Seleccione datos a exportar Elija formato (CSV, PDF) Descargue el archivo","title":"Exportaci\u00f3n de Datos"},{"location":"uso/#solucion-de-problemas-comunes","text":"","title":"Soluci\u00f3n de Problemas Comunes"},{"location":"uso/#problemas-de-acceso","text":"Verifique sus credenciales Use \"Olvid\u00e9 mi contrase\u00f1a\" Contacte al administrador","title":"Problemas de Acceso"},{"location":"uso/#errores-en-prestamos","text":"Verifique l\u00edmites de pr\u00e9stamos Confirme disponibilidad Revise estado de usuario","title":"Errores en Pr\u00e9stamos"},{"location":"uso/#contacto-y-soporte","text":"Correo de soporte: soporte@biblioteca.com Horario de atenci\u00f3n: Lunes a Viernes, 9:00 - 18:00 Sistema de tickets: [URL del sistema]","title":"Contacto y Soporte"},{"location":"bliblioteca/INFORME_TECNICO/","text":"Informe T\u00e9cnico del Proyecto de Biblioteca Digital Introducci\u00f3n En la era digital actual, las bibliotecas enfrentan el desaf\u00edo de modernizar sus servicios para satisfacer las necesidades de una generaci\u00f3n cada vez m\u00e1s conectada. Este proyecto surge como respuesta a la necesidad de transformar la gesti\u00f3n tradicional de bibliotecas en un sistema digital integral, aprovechando las tecnolog\u00edas modernas para mejorar la accesibilidad y eficiencia de los servicios bibliotecarios. Justificaci\u00f3n La implementaci\u00f3n de una biblioteca digital responde a m\u00faltiples necesidades: Accesibilidad : Permitir el acceso a recursos bibliogr\u00e1ficos desde cualquier ubicaci\u00f3n y dispositivo. Eficiencia Operativa : Automatizar procesos de gesti\u00f3n bibliotecaria para reducir tareas manuales. Preservaci\u00f3n Digital : Garantizar la conservaci\u00f3n y disponibilidad a largo plazo de los recursos. Sostenibilidad : Reducir costos operativos y huella ambiental asociada con la gesti\u00f3n f\u00edsica. Planteamiento del Problema Problem\u00e1tica Las bibliotecas tradicionales enfrentan limitaciones significativas: Acceso restringido a horarios f\u00edsicos Procesos manuales propensos a errores Dificultad en el seguimiento y control de pr\u00e9stamos Limitaciones en la b\u00fasqueda y catalogaci\u00f3n de recursos Pregunta de Investigaci\u00f3n \u00bfC\u00f3mo implementar un sistema de biblioteca digital que optimice la gesti\u00f3n de recursos bibliogr\u00e1ficos y mejore la experiencia de usuarios, garantizando la seguridad y eficiencia en el acceso a la informaci\u00f3n? Requisitos del Sistema Requisitos Funcionales Gesti\u00f3n de Usuarios Registro y autenticaci\u00f3n de usuarios Gesti\u00f3n de roles y permisos Perfil de usuario personalizable Gesti\u00f3n de Recursos Catalogaci\u00f3n de materiales bibliogr\u00e1ficos Sistema de b\u00fasqueda avanzada Control de pr\u00e9stamos y devoluciones Administraci\u00f3n Panel de control administrativo Generaci\u00f3n de reportes Gesti\u00f3n de inventario Requisitos No Funcionales Seguridad Implementaci\u00f3n de HTTPS Autenticaci\u00f3n segura mediante JWT Protecci\u00f3n contra ataques comunes Rendimiento Tiempo de respuesta < 2 segundos Soporte para m\u00faltiples usuarios concurrentes Optimizaci\u00f3n de consultas a base de datos Disponibilidad Servicio disponible 24/7 Plan de respaldo y recuperaci\u00f3n Monitoreo continuo Estado Actual del Proyecto Resumen Ejecutivo Este informe t\u00e9cnico detalla el estado actual y los avances del proyecto de Biblioteca Digital, un sistema integral que consta de un frontend moderno y un backend robusto. El proyecto implementa una arquitectura moderna basada en microservicios, con \u00e9nfasis en la seguridad, escalabilidad y mantenibilidad. 1. Arquitectura del Sistema 1.1 Frontend (Cliente) Tecnolog\u00eda Principal : React.js Caracter\u00edsticas Implementadas : Interfaz de usuario moderna y responsiva Implementaci\u00f3n de HTTPS para desarrollo local Sistema de autenticaci\u00f3n seguro Gesti\u00f3n de estado de la aplicaci\u00f3n Componentes reutilizables 1.2 Backend (Servidor) Tecnolog\u00eda Principal : Node.js Base de Datos : MySQL Contenedorizaci\u00f3n : Docker Configuraci\u00f3n de Docker Utilizamos Docker para containerizar nuestra aplicaci\u00f3n, lo que nos permite tener un entorno de desarrollo consistente y facilitar el despliegue: # Dockerfile para el backend # Este archivo define la configuraci\u00f3n para construir el contenedor de la aplicaci\u00f3n # Usamos la imagen alpine por su tama\u00f1o reducido y seguridad FROM node:16-alpine # Establecemos el directorio de trabajo WORKDIR /app # Copiamos los archivos de dependencias COPY package*.json ./ RUN npm install # Copiamos el resto del c\u00f3digo fuente COPY . . # Exponemos el puerto que usar\u00e1 la aplicaci\u00f3n EXPOSE 3000 CMD [\"npm\", \"start\"] Orquestaci\u00f3n con Docker Compose Utilizamos Docker Compose para gestionar m\u00faltiples contenedores y sus dependencias: # docker-compose.yml # Este archivo define la configuraci\u00f3n para orquestar m\u00faltiples servicios version: '3.8' services: # Servicio del backend de la aplicaci\u00f3n backend: build: . ports: - \"3000:3000\" # Mapeo de puertos host:contenedor environment: - NODE_ENV=production - DB_HOST=db depends_on: - db # Asegura que la base de datos est\u00e9 disponible antes de iniciar el backend # Servicio de base de datos MySQL db: image: mysql:8 environment: - MYSQL_ROOT_PASSWORD=secreto # Contrase\u00f1a del root (usar variables de entorno en producci\u00f3n) - MYSQL_DATABASE=biblioteca # Nombre de la base de datos volumes: - db_data:/var/lib/mysql # Persistencia de datos # Definici\u00f3n de vol\u00famenes para persistencia volumes: db_data: 2. Capa de Persistencia Avanzada 2.1 Optimizaciones Implementadas Consultas SQL optimizadas para rendimiento Implementaci\u00f3n de cach\u00e9 para consultas frecuentes \u00cdndices estrat\u00e9gicos en tablas cr\u00edticas Paginaci\u00f3n eficiente de resultados 2.2 Gesti\u00f3n de Datos Sistema de respaldo automatizado Validaci\u00f3n de integridad de datos Manejo de transacciones ACID Normalizaci\u00f3n de esquemas de base de datos 3. Controladores Avanzados 3.1 Caracter\u00edsticas Implementadas Manejo avanzado de ficheros Procesamiento de objetos Blob para documentos Validaci\u00f3n robusta de datos de entrada Sistema de logging detallado 3.2 Patrones de Dise\u00f1o Utilizados Patr\u00f3n MVC (Modelo-Vista-Controlador) Implementamos el patr\u00f3n MVC para separar la l\u00f3gica de negocio, la presentaci\u00f3n y el control de datos: // Controlador de Libros (Controller) // Maneja las peticiones HTTP y coordina la l\u00f3gica de negocio class LibroController { constructor(libroService) { // Inyecci\u00f3n de dependencias para mejor testabilidad this.libroService = libroService; } // M\u00e9todo para obtener todos los libros async obtenerLibros(req, res) { try { // Delega la l\u00f3gica de negocio al servicio const libros = await this.libroService.obtenerTodos(); // Responde con los datos en formato JSON res.json(libros); } catch (error) { // Manejo centralizado de errores res.status(500).json({ error: error.message, timestamp: new Date().toISOString() }); } } // M\u00e9todo para buscar libros por criterios async buscarLibros(req, res) { try { const { titulo, autor, categoria } = req.query; const libros = await this.libroService.buscar({ titulo, autor, categoria }); res.json(libros); } catch (error) { res.status(500).json({ error: error.message }); } } } Repository Pattern para Acceso a Datos Utilizamos el Repository Pattern para abstraer y encapsular la l\u00f3gica de acceso a datos: // Repositorio de Libros // Encapsula la l\u00f3gica de acceso a datos y proporciona una API clara class LibroRepository { constructor(database) { this.db = database; } // Buscar libro por ID async findById(id) { // Utilizamos par\u00e1metros preparados para prevenir SQL injection return await this.db.query( 'SELECT * FROM libros WHERE id = ?', [id] ); } // Guardar nuevo libro async save(libro) { // Validaci\u00f3n b\u00e1sica de datos if (!libro.titulo || !libro.autor) { throw new Error('T\u00edtulo y autor son requeridos'); } // Inserci\u00f3n con par\u00e1metros preparados return await this.db.query( 'INSERT INTO libros (titulo, autor, isbn, categoria) VALUES (?, ?, ?, ?)', [libro.titulo, libro.autor, libro.isbn, libro.categoria] ); } // Buscar libros por criterios async buscarPor(criterios) { let query = 'SELECT * FROM libros WHERE 1=1'; const params = []; // Construcci\u00f3n din\u00e1mica de consulta if (criterios.titulo) { query += ' AND titulo LIKE ?'; params.push(`%${criterios.titulo}%`); } if (criterios.autor) { query += ' AND autor LIKE ?'; params.push(`%${criterios.autor}%`); } return await this.db.query(query, params); } } 4. Gesti\u00f3n de Usuarios 4.1 Sistema de Roles Administradores Bibliotecarios Usuarios est\u00e1ndar Invitados 4.2 Caracter\u00edsticas de Seguridad Sistema de Autenticaci\u00f3n JWT Implementamos JSON Web Tokens (JWT) para gestionar la autenticaci\u00f3n de manera segura y escalable: // Configuraci\u00f3n y utilidades de JWT // Este m\u00f3dulo maneja la generaci\u00f3n y verificaci\u00f3n de tokens de acceso const jwt = require('jsonwebtoken'); // La clave secreta debe estar en variables de entorno const SECRET_KEY = process.env.JWT_SECRET; // Configuraci\u00f3n de opciones del token const TOKEN_CONFIG = { expiresIn: '24h', // Tiempo de expiraci\u00f3n algorithm: 'HS256' // Algoritmo de firma }; /** * Genera un token JWT para un usuario autenticado * @param {Object} user - Datos del usuario * @returns {string} Token JWT firmado */ const generateToken = (user) => { // Payload del token con informaci\u00f3n esencial const payload = { id: user.id, role: user.role, email: user.email, iat: Date.now() // Timestamp de emisi\u00f3n }; // Generamos y firmamos el token return jwt.sign( payload, SECRET_KEY, TOKEN_CONFIG ); }; /** * Verifica y decodifica un token JWT * @param {string} token - Token JWT a verificar * @returns {Object} Payload decodificado * @throws {Error} Si el token es inv\u00e1lido o est\u00e1 expirado */ const verifyToken = (token) => { try { // Verificamos y decodificamos el token const decoded = jwt.verify(token, SECRET_KEY); // Verificaci\u00f3n adicional de expiraci\u00f3n if (Date.now() >= decoded.exp * 1000) { throw new Error('Token expirado'); } return decoded; } catch (error) { // Manejamos diferentes tipos de errores if (error.name === 'TokenExpiredError') { throw new Error('El token ha expirado'); } else if (error.name === 'JsonWebTokenError') { throw new Error('Token inv\u00e1lido'); } throw error; } }; /** * Middleware para proteger rutas * @param {Object} req - Objeto de solicitud * @param {Object} res - Objeto de respuesta * @param {Function} next - Funci\u00f3n next */ const authMiddleware = (req, res, next) => { try { // Extraemos el token del header const token = req.headers.authorization?.split(' ')[1]; if (!token) { return res.status(401).json({ error: 'Token no proporcionado' }); } // Verificamos el token const decoded = verifyToken(token); req.user = decoded; // Agregamos el usuario al objeto request next(); } catch (error) { res.status(401).json({ error: error.message }); } }; 5. Implementaci\u00f3n de Seguridad 5.1 Medidas de Seguridad Implementadas Encriptaci\u00f3n de datos sensibles Protecci\u00f3n contra ataques XSS y CSRF Rate limiting para prevenir ataques DoS Validaci\u00f3n de entrada en todos los endpoints 5.2 Auditor\u00eda y Monitoreo Registro de actividades de usuarios Monitoreo de intentos de acceso Alertas de seguridad automatizadas Sistema de respuesta a incidentes 6. Pruebas de Software 6.1 Tipos de Pruebas Implementadas Pruebas Unitarias con Jest Implementamos pruebas unitarias exhaustivas para verificar el comportamiento de componentes individuales: // Pruebas unitarias para el sistema de autenticaci\u00f3n JWT // Verificamos la generaci\u00f3n y validaci\u00f3n de tokens const { generateToken, verifyToken } = require('../auth/jwt'); describe('Sistema de Autenticaci\u00f3n JWT', () => { // Datos de prueba const mockUser = { id: 1, email: 'usuario@ejemplo.com', role: 'usuario', nombre: 'Usuario Test' }; // Configuraci\u00f3n inicial antes de cada prueba beforeEach(() => { jest.clearAllMocks(); // Limpiamos los mocks process.env.JWT_SECRET = 'test_secret_key'; // Configuramos clave de prueba }); describe('Generaci\u00f3n de Token', () => { test('debe generar un token v\u00e1lido con la informaci\u00f3n correcta', () => { // Generamos el token const token = generateToken(mockUser); // Verificaciones b\u00e1sicas del token expect(token).toBeDefined(); expect(typeof token).toBe('string'); expect(token.split('.')).toHaveLength(3); // Formato JWT v\u00e1lido }); test('debe incluir toda la informaci\u00f3n del usuario en el payload', () => { const token = generateToken(mockUser); const decoded = verifyToken(token); // Verificamos que el payload contiene la informaci\u00f3n correcta expect(decoded.id).toBe(mockUser.id); expect(decoded.email).toBe(mockUser.email); expect(decoded.role).toBe(mockUser.role); expect(decoded.iat).toBeDefined(); // Timestamp de emisi\u00f3n }); }); describe('Verificaci\u00f3n de Token', () => { test('debe verificar correctamente un token v\u00e1lido', () => { const token = generateToken(mockUser); const decoded = verifyToken(token); // Verificamos la decodificaci\u00f3n correcta expect(decoded).toMatchObject({ id: mockUser.id, email: mockUser.email, role: mockUser.role }); }); test('debe rechazar un token inv\u00e1lido', () => { // Verificamos que se lance el error apropiado expect(() => { verifyToken('token_invalido'); }).toThrow('Token inv\u00e1lido'); }); test('debe rechazar un token expirado', () => { // Simulamos un token expirado jest.spyOn(Date, 'now').mockImplementation(() => Date.now() + 86400000); const token = generateToken(mockUser); expect(() => { verifyToken(token); }).toThrow('Token expirado'); }); }); }); Pruebas de Integraci\u00f3n Realizamos pruebas de integraci\u00f3n para verificar la interacci\u00f3n entre diferentes componentes del sistema: // Pruebas de integraci\u00f3n para el API de Libros // Verificamos el funcionamiento completo de los endpoints const request = require('supertest'); const app = require('../app'); const { conectarDB, limpiarDB, cerrarDB } = require('../config/database'); describe('API de Gesti\u00f3n de Libros', () => { // Configuraci\u00f3n inicial para las pruebas beforeAll(async () => { await conectarDB(); // Conectamos a la base de datos de prueba }); // Limpiamos la base de datos antes de cada prueba beforeEach(async () => { await limpiarDB(); }); // Cerramos la conexi\u00f3n despu\u00e9s de todas las pruebas afterAll(async () => { await cerrarDB(); }); describe('GET /api/libros', () => { test('debe devolver lista de libros paginada', async () => { // Preparamos datos de prueba await request(app) .post('/api/libros') .send([ { titulo: 'Libro 1', autor: 'Autor 1' }, { titulo: 'Libro 2', autor: 'Autor 2' } ]); // Realizamos la petici\u00f3n de prueba const response = await request(app) .get('/api/libros?page=1&limit=10') .expect('Content-Type', /json/) .expect(200); // Verificamos la estructura y contenido de la respuesta expect(response.body).toMatchObject({ data: expect.any(Array), pagination: { total: 2, page: 1, limit: 10 } }); expect(response.body.data).toHaveLength(2); }); test('debe filtrar libros por criterios de b\u00fasqueda', async () => { // Preparamos datos de prueba await request(app) .post('/api/libros') .send([ { titulo: 'JavaScript Avanzado', autor: 'Autor 1' }, { titulo: 'Python B\u00e1sico', autor: 'Autor 2' } ]); // Realizamos b\u00fasqueda por t\u00edtulo const response = await request(app) .get('/api/libros?search=JavaScript') .expect(200); expect(response.body.data).toHaveLength(1); expect(response.body.data[0].titulo).toContain('JavaScript'); }); }); describe('POST /api/libros', () => { test('debe crear un nuevo libro con datos v\u00e1lidos', async () => { const nuevoLibro = { titulo: 'Nuevo Libro', autor: 'Nuevo Autor', isbn: '1234567890', categoria: 'Programaci\u00f3n' }; const response = await request(app) .post('/api/libros') .send(nuevoLibro) .expect(201); expect(response.body).toMatchObject({ id: expect.any(Number), ...nuevoLibro }); }); test('debe validar datos requeridos', async () => { const libroIncompleto = { titulo: 'Libro Sin Autor' }; await request(app) .post('/api/libros') .send(libroIncompleto) .expect(400); }); }); }); 6.2 Herramientas y M\u00e9tricas Jest para pruebas unitarias Supertest para pruebas de API JMeter para pruebas de carga SonarQube para an\u00e1lisis de c\u00f3digo Conclusi\u00f3n El proyecto de Biblioteca Digital muestra un progreso significativo en la implementaci\u00f3n de caracter\u00edsticas fundamentales, seguridad y arquitectura. Las pruebas realizadas demuestran la robustez del sistema y su capacidad para manejar las necesidades de una biblioteca moderna. Los pr\u00f3ximos pasos se centrar\u00e1n en la optimizaci\u00f3n continua y la mejora de la experiencia del usuario.","title":"Informe T\u00e9cnico del Proyecto de Biblioteca Digital"},{"location":"bliblioteca/INFORME_TECNICO/#informe-tecnico-del-proyecto-de-biblioteca-digital","text":"","title":"Informe T\u00e9cnico del Proyecto de Biblioteca Digital"},{"location":"bliblioteca/INFORME_TECNICO/#introduccion","text":"En la era digital actual, las bibliotecas enfrentan el desaf\u00edo de modernizar sus servicios para satisfacer las necesidades de una generaci\u00f3n cada vez m\u00e1s conectada. Este proyecto surge como respuesta a la necesidad de transformar la gesti\u00f3n tradicional de bibliotecas en un sistema digital integral, aprovechando las tecnolog\u00edas modernas para mejorar la accesibilidad y eficiencia de los servicios bibliotecarios.","title":"Introducci\u00f3n"},{"location":"bliblioteca/INFORME_TECNICO/#justificacion","text":"La implementaci\u00f3n de una biblioteca digital responde a m\u00faltiples necesidades: Accesibilidad : Permitir el acceso a recursos bibliogr\u00e1ficos desde cualquier ubicaci\u00f3n y dispositivo. Eficiencia Operativa : Automatizar procesos de gesti\u00f3n bibliotecaria para reducir tareas manuales. Preservaci\u00f3n Digital : Garantizar la conservaci\u00f3n y disponibilidad a largo plazo de los recursos. Sostenibilidad : Reducir costos operativos y huella ambiental asociada con la gesti\u00f3n f\u00edsica.","title":"Justificaci\u00f3n"},{"location":"bliblioteca/INFORME_TECNICO/#planteamiento-del-problema","text":"","title":"Planteamiento del Problema"},{"location":"bliblioteca/INFORME_TECNICO/#problematica","text":"Las bibliotecas tradicionales enfrentan limitaciones significativas: Acceso restringido a horarios f\u00edsicos Procesos manuales propensos a errores Dificultad en el seguimiento y control de pr\u00e9stamos Limitaciones en la b\u00fasqueda y catalogaci\u00f3n de recursos","title":"Problem\u00e1tica"},{"location":"bliblioteca/INFORME_TECNICO/#pregunta-de-investigacion","text":"\u00bfC\u00f3mo implementar un sistema de biblioteca digital que optimice la gesti\u00f3n de recursos bibliogr\u00e1ficos y mejore la experiencia de usuarios, garantizando la seguridad y eficiencia en el acceso a la informaci\u00f3n?","title":"Pregunta de Investigaci\u00f3n"},{"location":"bliblioteca/INFORME_TECNICO/#requisitos-del-sistema","text":"","title":"Requisitos del Sistema"},{"location":"bliblioteca/INFORME_TECNICO/#requisitos-funcionales","text":"Gesti\u00f3n de Usuarios Registro y autenticaci\u00f3n de usuarios Gesti\u00f3n de roles y permisos Perfil de usuario personalizable Gesti\u00f3n de Recursos Catalogaci\u00f3n de materiales bibliogr\u00e1ficos Sistema de b\u00fasqueda avanzada Control de pr\u00e9stamos y devoluciones Administraci\u00f3n Panel de control administrativo Generaci\u00f3n de reportes Gesti\u00f3n de inventario","title":"Requisitos Funcionales"},{"location":"bliblioteca/INFORME_TECNICO/#requisitos-no-funcionales","text":"Seguridad Implementaci\u00f3n de HTTPS Autenticaci\u00f3n segura mediante JWT Protecci\u00f3n contra ataques comunes Rendimiento Tiempo de respuesta < 2 segundos Soporte para m\u00faltiples usuarios concurrentes Optimizaci\u00f3n de consultas a base de datos Disponibilidad Servicio disponible 24/7 Plan de respaldo y recuperaci\u00f3n Monitoreo continuo","title":"Requisitos No Funcionales"},{"location":"bliblioteca/INFORME_TECNICO/#estado-actual-del-proyecto","text":"","title":"Estado Actual del Proyecto"},{"location":"bliblioteca/INFORME_TECNICO/#resumen-ejecutivo","text":"Este informe t\u00e9cnico detalla el estado actual y los avances del proyecto de Biblioteca Digital, un sistema integral que consta de un frontend moderno y un backend robusto. El proyecto implementa una arquitectura moderna basada en microservicios, con \u00e9nfasis en la seguridad, escalabilidad y mantenibilidad.","title":"Resumen Ejecutivo"},{"location":"bliblioteca/INFORME_TECNICO/#1-arquitectura-del-sistema","text":"","title":"1. Arquitectura del Sistema"},{"location":"bliblioteca/INFORME_TECNICO/#11-frontend-cliente","text":"Tecnolog\u00eda Principal : React.js Caracter\u00edsticas Implementadas : Interfaz de usuario moderna y responsiva Implementaci\u00f3n de HTTPS para desarrollo local Sistema de autenticaci\u00f3n seguro Gesti\u00f3n de estado de la aplicaci\u00f3n Componentes reutilizables","title":"1.1 Frontend (Cliente)"},{"location":"bliblioteca/INFORME_TECNICO/#12-backend-servidor","text":"Tecnolog\u00eda Principal : Node.js Base de Datos : MySQL Contenedorizaci\u00f3n : Docker","title":"1.2 Backend (Servidor)"},{"location":"bliblioteca/INFORME_TECNICO/#configuracion-de-docker","text":"Utilizamos Docker para containerizar nuestra aplicaci\u00f3n, lo que nos permite tener un entorno de desarrollo consistente y facilitar el despliegue: # Dockerfile para el backend # Este archivo define la configuraci\u00f3n para construir el contenedor de la aplicaci\u00f3n # Usamos la imagen alpine por su tama\u00f1o reducido y seguridad FROM node:16-alpine # Establecemos el directorio de trabajo WORKDIR /app # Copiamos los archivos de dependencias COPY package*.json ./ RUN npm install # Copiamos el resto del c\u00f3digo fuente COPY . . # Exponemos el puerto que usar\u00e1 la aplicaci\u00f3n EXPOSE 3000 CMD [\"npm\", \"start\"]","title":"Configuraci\u00f3n de Docker"},{"location":"bliblioteca/INFORME_TECNICO/#orquestacion-con-docker-compose","text":"Utilizamos Docker Compose para gestionar m\u00faltiples contenedores y sus dependencias: # docker-compose.yml # Este archivo define la configuraci\u00f3n para orquestar m\u00faltiples servicios version: '3.8' services: # Servicio del backend de la aplicaci\u00f3n backend: build: . ports: - \"3000:3000\" # Mapeo de puertos host:contenedor environment: - NODE_ENV=production - DB_HOST=db depends_on: - db # Asegura que la base de datos est\u00e9 disponible antes de iniciar el backend # Servicio de base de datos MySQL db: image: mysql:8 environment: - MYSQL_ROOT_PASSWORD=secreto # Contrase\u00f1a del root (usar variables de entorno en producci\u00f3n) - MYSQL_DATABASE=biblioteca # Nombre de la base de datos volumes: - db_data:/var/lib/mysql # Persistencia de datos # Definici\u00f3n de vol\u00famenes para persistencia volumes: db_data:","title":"Orquestaci\u00f3n con Docker Compose"},{"location":"bliblioteca/INFORME_TECNICO/#2-capa-de-persistencia-avanzada","text":"","title":"2. Capa de Persistencia Avanzada"},{"location":"bliblioteca/INFORME_TECNICO/#21-optimizaciones-implementadas","text":"Consultas SQL optimizadas para rendimiento Implementaci\u00f3n de cach\u00e9 para consultas frecuentes \u00cdndices estrat\u00e9gicos en tablas cr\u00edticas Paginaci\u00f3n eficiente de resultados","title":"2.1 Optimizaciones Implementadas"},{"location":"bliblioteca/INFORME_TECNICO/#22-gestion-de-datos","text":"Sistema de respaldo automatizado Validaci\u00f3n de integridad de datos Manejo de transacciones ACID Normalizaci\u00f3n de esquemas de base de datos","title":"2.2 Gesti\u00f3n de Datos"},{"location":"bliblioteca/INFORME_TECNICO/#3-controladores-avanzados","text":"","title":"3. Controladores Avanzados"},{"location":"bliblioteca/INFORME_TECNICO/#31-caracteristicas-implementadas","text":"Manejo avanzado de ficheros Procesamiento de objetos Blob para documentos Validaci\u00f3n robusta de datos de entrada Sistema de logging detallado","title":"3.1 Caracter\u00edsticas Implementadas"},{"location":"bliblioteca/INFORME_TECNICO/#32-patrones-de-diseno-utilizados","text":"","title":"3.2 Patrones de Dise\u00f1o Utilizados"},{"location":"bliblioteca/INFORME_TECNICO/#patron-mvc-modelo-vista-controlador","text":"Implementamos el patr\u00f3n MVC para separar la l\u00f3gica de negocio, la presentaci\u00f3n y el control de datos: // Controlador de Libros (Controller) // Maneja las peticiones HTTP y coordina la l\u00f3gica de negocio class LibroController { constructor(libroService) { // Inyecci\u00f3n de dependencias para mejor testabilidad this.libroService = libroService; } // M\u00e9todo para obtener todos los libros async obtenerLibros(req, res) { try { // Delega la l\u00f3gica de negocio al servicio const libros = await this.libroService.obtenerTodos(); // Responde con los datos en formato JSON res.json(libros); } catch (error) { // Manejo centralizado de errores res.status(500).json({ error: error.message, timestamp: new Date().toISOString() }); } } // M\u00e9todo para buscar libros por criterios async buscarLibros(req, res) { try { const { titulo, autor, categoria } = req.query; const libros = await this.libroService.buscar({ titulo, autor, categoria }); res.json(libros); } catch (error) { res.status(500).json({ error: error.message }); } } }","title":"Patr\u00f3n MVC (Modelo-Vista-Controlador)"},{"location":"bliblioteca/INFORME_TECNICO/#repository-pattern-para-acceso-a-datos","text":"Utilizamos el Repository Pattern para abstraer y encapsular la l\u00f3gica de acceso a datos: // Repositorio de Libros // Encapsula la l\u00f3gica de acceso a datos y proporciona una API clara class LibroRepository { constructor(database) { this.db = database; } // Buscar libro por ID async findById(id) { // Utilizamos par\u00e1metros preparados para prevenir SQL injection return await this.db.query( 'SELECT * FROM libros WHERE id = ?', [id] ); } // Guardar nuevo libro async save(libro) { // Validaci\u00f3n b\u00e1sica de datos if (!libro.titulo || !libro.autor) { throw new Error('T\u00edtulo y autor son requeridos'); } // Inserci\u00f3n con par\u00e1metros preparados return await this.db.query( 'INSERT INTO libros (titulo, autor, isbn, categoria) VALUES (?, ?, ?, ?)', [libro.titulo, libro.autor, libro.isbn, libro.categoria] ); } // Buscar libros por criterios async buscarPor(criterios) { let query = 'SELECT * FROM libros WHERE 1=1'; const params = []; // Construcci\u00f3n din\u00e1mica de consulta if (criterios.titulo) { query += ' AND titulo LIKE ?'; params.push(`%${criterios.titulo}%`); } if (criterios.autor) { query += ' AND autor LIKE ?'; params.push(`%${criterios.autor}%`); } return await this.db.query(query, params); } }","title":"Repository Pattern para Acceso a Datos"},{"location":"bliblioteca/INFORME_TECNICO/#4-gestion-de-usuarios","text":"","title":"4. Gesti\u00f3n de Usuarios"},{"location":"bliblioteca/INFORME_TECNICO/#41-sistema-de-roles","text":"Administradores Bibliotecarios Usuarios est\u00e1ndar Invitados","title":"4.1 Sistema de Roles"},{"location":"bliblioteca/INFORME_TECNICO/#42-caracteristicas-de-seguridad","text":"","title":"4.2 Caracter\u00edsticas de Seguridad"},{"location":"bliblioteca/INFORME_TECNICO/#sistema-de-autenticacion-jwt","text":"Implementamos JSON Web Tokens (JWT) para gestionar la autenticaci\u00f3n de manera segura y escalable: // Configuraci\u00f3n y utilidades de JWT // Este m\u00f3dulo maneja la generaci\u00f3n y verificaci\u00f3n de tokens de acceso const jwt = require('jsonwebtoken'); // La clave secreta debe estar en variables de entorno const SECRET_KEY = process.env.JWT_SECRET; // Configuraci\u00f3n de opciones del token const TOKEN_CONFIG = { expiresIn: '24h', // Tiempo de expiraci\u00f3n algorithm: 'HS256' // Algoritmo de firma }; /** * Genera un token JWT para un usuario autenticado * @param {Object} user - Datos del usuario * @returns {string} Token JWT firmado */ const generateToken = (user) => { // Payload del token con informaci\u00f3n esencial const payload = { id: user.id, role: user.role, email: user.email, iat: Date.now() // Timestamp de emisi\u00f3n }; // Generamos y firmamos el token return jwt.sign( payload, SECRET_KEY, TOKEN_CONFIG ); }; /** * Verifica y decodifica un token JWT * @param {string} token - Token JWT a verificar * @returns {Object} Payload decodificado * @throws {Error} Si el token es inv\u00e1lido o est\u00e1 expirado */ const verifyToken = (token) => { try { // Verificamos y decodificamos el token const decoded = jwt.verify(token, SECRET_KEY); // Verificaci\u00f3n adicional de expiraci\u00f3n if (Date.now() >= decoded.exp * 1000) { throw new Error('Token expirado'); } return decoded; } catch (error) { // Manejamos diferentes tipos de errores if (error.name === 'TokenExpiredError') { throw new Error('El token ha expirado'); } else if (error.name === 'JsonWebTokenError') { throw new Error('Token inv\u00e1lido'); } throw error; } }; /** * Middleware para proteger rutas * @param {Object} req - Objeto de solicitud * @param {Object} res - Objeto de respuesta * @param {Function} next - Funci\u00f3n next */ const authMiddleware = (req, res, next) => { try { // Extraemos el token del header const token = req.headers.authorization?.split(' ')[1]; if (!token) { return res.status(401).json({ error: 'Token no proporcionado' }); } // Verificamos el token const decoded = verifyToken(token); req.user = decoded; // Agregamos el usuario al objeto request next(); } catch (error) { res.status(401).json({ error: error.message }); } };","title":"Sistema de Autenticaci\u00f3n JWT"},{"location":"bliblioteca/INFORME_TECNICO/#5-implementacion-de-seguridad","text":"","title":"5. Implementaci\u00f3n de Seguridad"},{"location":"bliblioteca/INFORME_TECNICO/#51-medidas-de-seguridad-implementadas","text":"Encriptaci\u00f3n de datos sensibles Protecci\u00f3n contra ataques XSS y CSRF Rate limiting para prevenir ataques DoS Validaci\u00f3n de entrada en todos los endpoints","title":"5.1 Medidas de Seguridad Implementadas"},{"location":"bliblioteca/INFORME_TECNICO/#52-auditoria-y-monitoreo","text":"Registro de actividades de usuarios Monitoreo de intentos de acceso Alertas de seguridad automatizadas Sistema de respuesta a incidentes","title":"5.2 Auditor\u00eda y Monitoreo"},{"location":"bliblioteca/INFORME_TECNICO/#6-pruebas-de-software","text":"","title":"6. Pruebas de Software"},{"location":"bliblioteca/INFORME_TECNICO/#61-tipos-de-pruebas-implementadas","text":"","title":"6.1 Tipos de Pruebas Implementadas"},{"location":"bliblioteca/INFORME_TECNICO/#pruebas-unitarias-con-jest","text":"Implementamos pruebas unitarias exhaustivas para verificar el comportamiento de componentes individuales: // Pruebas unitarias para el sistema de autenticaci\u00f3n JWT // Verificamos la generaci\u00f3n y validaci\u00f3n de tokens const { generateToken, verifyToken } = require('../auth/jwt'); describe('Sistema de Autenticaci\u00f3n JWT', () => { // Datos de prueba const mockUser = { id: 1, email: 'usuario@ejemplo.com', role: 'usuario', nombre: 'Usuario Test' }; // Configuraci\u00f3n inicial antes de cada prueba beforeEach(() => { jest.clearAllMocks(); // Limpiamos los mocks process.env.JWT_SECRET = 'test_secret_key'; // Configuramos clave de prueba }); describe('Generaci\u00f3n de Token', () => { test('debe generar un token v\u00e1lido con la informaci\u00f3n correcta', () => { // Generamos el token const token = generateToken(mockUser); // Verificaciones b\u00e1sicas del token expect(token).toBeDefined(); expect(typeof token).toBe('string'); expect(token.split('.')).toHaveLength(3); // Formato JWT v\u00e1lido }); test('debe incluir toda la informaci\u00f3n del usuario en el payload', () => { const token = generateToken(mockUser); const decoded = verifyToken(token); // Verificamos que el payload contiene la informaci\u00f3n correcta expect(decoded.id).toBe(mockUser.id); expect(decoded.email).toBe(mockUser.email); expect(decoded.role).toBe(mockUser.role); expect(decoded.iat).toBeDefined(); // Timestamp de emisi\u00f3n }); }); describe('Verificaci\u00f3n de Token', () => { test('debe verificar correctamente un token v\u00e1lido', () => { const token = generateToken(mockUser); const decoded = verifyToken(token); // Verificamos la decodificaci\u00f3n correcta expect(decoded).toMatchObject({ id: mockUser.id, email: mockUser.email, role: mockUser.role }); }); test('debe rechazar un token inv\u00e1lido', () => { // Verificamos que se lance el error apropiado expect(() => { verifyToken('token_invalido'); }).toThrow('Token inv\u00e1lido'); }); test('debe rechazar un token expirado', () => { // Simulamos un token expirado jest.spyOn(Date, 'now').mockImplementation(() => Date.now() + 86400000); const token = generateToken(mockUser); expect(() => { verifyToken(token); }).toThrow('Token expirado'); }); }); });","title":"Pruebas Unitarias con Jest"},{"location":"bliblioteca/INFORME_TECNICO/#pruebas-de-integracion","text":"Realizamos pruebas de integraci\u00f3n para verificar la interacci\u00f3n entre diferentes componentes del sistema: // Pruebas de integraci\u00f3n para el API de Libros // Verificamos el funcionamiento completo de los endpoints const request = require('supertest'); const app = require('../app'); const { conectarDB, limpiarDB, cerrarDB } = require('../config/database'); describe('API de Gesti\u00f3n de Libros', () => { // Configuraci\u00f3n inicial para las pruebas beforeAll(async () => { await conectarDB(); // Conectamos a la base de datos de prueba }); // Limpiamos la base de datos antes de cada prueba beforeEach(async () => { await limpiarDB(); }); // Cerramos la conexi\u00f3n despu\u00e9s de todas las pruebas afterAll(async () => { await cerrarDB(); }); describe('GET /api/libros', () => { test('debe devolver lista de libros paginada', async () => { // Preparamos datos de prueba await request(app) .post('/api/libros') .send([ { titulo: 'Libro 1', autor: 'Autor 1' }, { titulo: 'Libro 2', autor: 'Autor 2' } ]); // Realizamos la petici\u00f3n de prueba const response = await request(app) .get('/api/libros?page=1&limit=10') .expect('Content-Type', /json/) .expect(200); // Verificamos la estructura y contenido de la respuesta expect(response.body).toMatchObject({ data: expect.any(Array), pagination: { total: 2, page: 1, limit: 10 } }); expect(response.body.data).toHaveLength(2); }); test('debe filtrar libros por criterios de b\u00fasqueda', async () => { // Preparamos datos de prueba await request(app) .post('/api/libros') .send([ { titulo: 'JavaScript Avanzado', autor: 'Autor 1' }, { titulo: 'Python B\u00e1sico', autor: 'Autor 2' } ]); // Realizamos b\u00fasqueda por t\u00edtulo const response = await request(app) .get('/api/libros?search=JavaScript') .expect(200); expect(response.body.data).toHaveLength(1); expect(response.body.data[0].titulo).toContain('JavaScript'); }); }); describe('POST /api/libros', () => { test('debe crear un nuevo libro con datos v\u00e1lidos', async () => { const nuevoLibro = { titulo: 'Nuevo Libro', autor: 'Nuevo Autor', isbn: '1234567890', categoria: 'Programaci\u00f3n' }; const response = await request(app) .post('/api/libros') .send(nuevoLibro) .expect(201); expect(response.body).toMatchObject({ id: expect.any(Number), ...nuevoLibro }); }); test('debe validar datos requeridos', async () => { const libroIncompleto = { titulo: 'Libro Sin Autor' }; await request(app) .post('/api/libros') .send(libroIncompleto) .expect(400); }); }); });","title":"Pruebas de Integraci\u00f3n"},{"location":"bliblioteca/INFORME_TECNICO/#62-herramientas-y-metricas","text":"Jest para pruebas unitarias Supertest para pruebas de API JMeter para pruebas de carga SonarQube para an\u00e1lisis de c\u00f3digo","title":"6.2 Herramientas y M\u00e9tricas"},{"location":"bliblioteca/INFORME_TECNICO/#conclusion","text":"El proyecto de Biblioteca Digital muestra un progreso significativo en la implementaci\u00f3n de caracter\u00edsticas fundamentales, seguridad y arquitectura. Las pruebas realizadas demuestran la robustez del sistema y su capacidad para manejar las necesidades de una biblioteca moderna. Los pr\u00f3ximos pasos se centrar\u00e1n en la optimizaci\u00f3n continua y la mejora de la experiencia del usuario.","title":"Conclusi\u00f3n"}]}